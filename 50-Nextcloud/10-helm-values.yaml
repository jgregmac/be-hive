# Use nginx instead of apache. works around hugepage problem???
image:
  flavor: apache # default: apache

ingress:
  enabled: true
  # written to spec.ingressClassName in the resulting ingress resource.
  # This is CRITICAL for the Nginx ingress controller to work.
  className: nginx
  annotations:
    # Enable SSL redirect... required for HTTPS front end/plain-text backend?
    ingress.kubernetes.io/ssl-redirect: "true"
    # Sticky sessions, useful for load balancing in multi-pod deployments:
    # <https://github.com/nextcloud/helm/blob/main/charts/nextcloud/README.md#ingress-sticky-sessions>
    # nginx.ingress.kubernetes.io/affinity: cookie
    # Source IP preservation, from the helm chart README:
    # <https://github.com/nextcloud/helm/blob/main/charts/nextcloud/README.md#preserving-source-ip>
    # nginx.ingress.kubernetes.io/enable-cors: "true"
    # nginx.ingress.kubernetes.io/cors-allow-headers: "X-Forwarded-For"
    # Annotations for service discover.  Not sure if we need it? from README for the helm chard:
    # <https://github.com/nextcloud/helm/blob/main/charts/nextcloud/README.md#service-discovery-with-nginx-and-ingress>
    # nginx.ingress.kubernetes.io/server-snippet: |-
    #   server_tokens off;
    #   proxy_hide_header X-Powered-By;
    #   rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
    #   rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
    #   rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #   rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
    #   location = /.well-known/carddav {
    #     return 301 $scheme://$host/remote.php/dav;
    #   }
    #   location = /.well-known/caldav {
    #     return 301 $scheme://$host/remote.php/dav;
    #   }
    #   location = /robots.txt {
    #     allow all;
    #     log_not_found off;
    #     access_log off;
    #   }
    #   location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
    #     deny all;
    #   }
    #   location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
    #     deny all;
    #   }
  tls:
  - hosts:
    - nextcloud.be-hive.cloud
    secretName: be-hive-cloud-tls

# Nextcloud configuration:
nextcloud:
  host: nextcloud.be-hive.cloud
  # Uncomment if using Apache with Hugepages enabled on the K8s nodes.
  # extraVolumes:
  #   - name: hugepages
  #     emptyDir:
  #       medium: HugePages-2Mi
  # extraVolumeMounts:
  #   - name: hugepages
  #     mountPath: /dev/hugepages
  # password: "SECOND_PASSWORD"
  existingSecret:
    enabled: true
    secretName: nextcloud-credentials
    usernameKey: nextcloud-username
    passwordKey: nextcloud-password
    # tokenKey: ""
    # smtpUsernameKey: smtp-username
    # smtpPasswordKey: smtp-password
    # smtpHostKey: smtp-host
  configs:
    # Change logging behavior. By default, logging is disabled.
    # Note: loglevels: 0=DEBUG, 1=INFO, 2=WARN, 3=ERROR, 4=FATAL
    logging.config.php: |-
      <?php
      $CONFIG = array (
        'log_type' => 'file',
        'logfile' => '/dev/stdout',
        'loglevel' => 1,
        'logdateformat' => 'F d, Y H:i:s'
        );
    # Adds X-Forwareded-For header to incomming HTTP messages:
    proxy.config.php: |-
      <?php
      $CONFIG = array (
        'trusted_proxies' => array(
          0 => '127.0.0.1',
          1 => '10.0.0.0/8',
        ),
        'forwarded_for_headers' => array('HTTP_X_FORWARDED_FOR'),
      );
# resources:
#   requests:
#     hugepages-2Mi: 500Mi
#     # note that Kubernetes currently requires cpu or memory requests and limits before hugepages are allowed.
#     memory: 500Mi
#   limits:
#     # limit and request must be the same for hugepages. They are a fixed resource.
#     hugepages-2Mi: 500Mi
#     # note that Kubernetes currently requires cpu or memory requests and limits before hugepages are allowed.
#     memory: 1Gi

nginx:
  enabled: false # default: false

# Redis is not enabled by default.  Do we want it?
redis:
  enabled: false

# Database configuration:
externalDatabase:
  enabled: true
  type: postgresql
  # database: "nextcloud" # <- Default value
  # username: "nextcloud" # <- Default value
  host: postgresql.nextcloud.svc.cluster.local
  # password: "changeme" # <- Default value
  existingSecret:
    enabled: true
    secretName: nextcloud-credentials
    usernameKey: postgres-username
    passwordKey: postgres-password
    # hostKey: host
    # databaseKey: database
internalDatabase:
  enabled: false
postgresql:
  enabled: true
  global:
    # defaultStorageClass is ignored for primary replica persistent disk. Worthless!
    # defaultStorageClass: longhorn-ssd-double
    postgresql: # <- TODO: Verify the key.  This looks incorrect.
      auth:
        # database: nextcloud # <- Default value
        # username: nextcloud # <- Default value
        # password: "changeme" # <- Default value
        existingSecret: nextcloud-credentials
        secretKeys:
          adminPasswordKey: postgres-admin-password
          userPasswordKey: postgres-password
          replicationPasswordKey: postgres-replication-password
      primary.persistence.enabled: true
  primary:
    persistence:
      enabled: true
      size: 16Gi
      storageClass: longhorn-ssd-double

# Storage:
persistence:
  enabled: true
  storageClass: longhorn-ssd-double
  size: 512Gi

collabora:
  enabled: true
  collabora:
    aliasgroups:
    - host: "https://collabora.be-hive.cloud:443"
    extra_params: "--o:ssl.enable=false --o:ssl.termination=true --o:num_prespawn_children=4"
    # for production enviroment we recommend appending `extra_params` with `--o:num_prespawn_children=4`. It defines number of child processes to keep started in advance and waiting for new clients
    existingSecret:
      enabled: true
      secretName: nextcloud-credentials
      usernameKey: collabora-username
      passwordKey: collabora-password
  ingress:
    enabled: true
    className: nginx
    annotations:
      # Enable SSL redirect... required for HTTPS front end/plain-text backend?
      ingress.kubernetes.io/ssl-redirect: "true"
      # Note in Chart README, this is needed to ensure clients co-editing documents will connect to the same pod:
      # <https://github.com/CollaboraOnline/online/tree/master/kubernetes/helm/collabora-online#deploying-collabora-online-in-kubernetes>
      nginx.ingress.kubernetes.io/upstream-hash-by: "$arg_WOPISrc"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    hosts:
    - host: collabora.be-hive.cloud
      paths:
        - path: /
          pathType: Prefix
    tls:
    - hosts:
      - collabora.be-hive.cloud
      secretName: be-hive-cloud-tls


